version: '3.4'

services:
  php:
    image: kaliop/php-fpm:stretch
    hostname: php
    build:
      context: ./docker/php
      args:
        PHP_VERSION: ${PHP_VERSION}
#    depends_on:
#      - db
    env_file:
      - .env
    # Comment out these volumes in production
    volumes:
      - .:/var/www/html:rw,cached
      - ${COMPOSER_CACHE_DIR}:/home/site/.composer:rw,cached
      - ${NPM_CACHE_DIR}:/home/site/.npm:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./var:/var/www/html/var:rw
      - "./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf"
      - "./docker/php/php.ini:/usr/local/etc/php/conf.d/docker-php-ext-stack-custom.ini"
    networks:
      api_net:
        ipv4_address: 172.110.0.2

  nginx:
    image: nginx:${NGINX_VERSION}
    hostname: nginx
    depends_on:
      - php
    volumes:
        - "./docker/nginx/conf.d:/etc/nginx/conf.d"
        - "./public:/var/www/html/public:ro"
    env_file:
      - .env
    networks:
      api_net:
        ipv4_address: 172.110.0.3

  varnish:
    image: quay.io/api-platform/varnish
    depends_on:
      - nginx
    hostname: varnish
    volumes:
      - ./docker/varnish/conf:/usr/local/etc/varnish:ro
    tmpfs:
      - /usr/local/var/varnish:exec
    ports:
      - "81:80"
    networks:
      api_net:
        ipv4_address: 172.110.0.5

  mysql:
    image: mysql:5.7.21
    hostname: mysql
    networks:
      api_net:
        ipv4_address: 172.110.0.7
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - db-data:/var/lib/mysql:rw
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}

  haproxy:
    image: haproxy:alpine
    hostname: haproxy
    container_name: api_haproxy
    depends_on:
      - nginx
    env_file:
      - .env
    ports:
      - 80:80
    volumes:
      - "./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
    networks:
      api_net:
        ipv4_address: 172.110.0.6

networks:
  api_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.110.0.0/24

volumes:
  db-data: {}
