version: '3.4'

services:
  php:
    image: kaliop/php-fpm:stretch
    hostname: php
    build:
      context: ./docker/php
      args:
        PHP_VERSION: ${PHP_VERSION}
#    depends_on:
#      - db
    env_file:
      - .env
    # Comment out these volumes in production
    volumes:
      - .:/var/www/html:rw,cached
      - "/home/jballestracci/.composer:/home/site/.composer:rw,cached"
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./var:/var/www/html/var:rw
      - "./docker/php/www.conf:/usr/local/etc/php-fpm.d/www.conf"
      - "./docker/php/php.ini:/usr/local/etc/php/conf.d/docker-php-ext-stack-custom.ini"
    networks:
      api_net:
        ipv4_address: 172.110.0.2

  nginx:
    image: nginx:${NGINX_VERSION}
    hostname: nginx
    depends_on:
      - php
    volumes:
        - "./docker/nginx/conf.d:/etc/nginx/conf.d"
        - "./public:/var/www/html/public:ro"
    env_file:
      - .env
    networks:
      api_net:
        ipv4_address: 172.110.0.3

  varnish:
    image: quay.io/api-platform/varnish
    depends_on:
      - nginx
    hostname: varnish
    volumes:
      - ./docker/varnish/conf:/usr/local/etc/varnish:ro
    tmpfs:
      - /usr/local/var/varnish:exec
    ports:
      - "81:80"
    networks:
      api_net:
        ipv4_address: 172.110.0.5
#
#  db:
#    # In production, you may want to use a managed database service
#    image: postgres:9.6-alpine
#    environment:
#      - POSTGRES_DB=api
#      - POSTGRES_USER=api-platform
#      # You should definitely change the password in production
#      - POSTGRES_PASSWORD=!ChangeMe!
#    volumes:
#      - db-data:/var/lib/postgresql/data:rw
#      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
#      # - ./docker/db/data:/var/lib/postgresql/data:rw
#    ports:
#      - "5432:5432"
#
  haproxy:
    image: haproxy:alpine
    hostname: haproxy
    container_name: api_haproxy
    depends_on:
      - nginx
    env_file:
      - .env
    ports:
      - 80:80
    volumes:
      - "./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
    networks:
      api_net:
        ipv4_address: 172.110.0.6

networks:
  api_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.110.0.0/24

#volumes:
#  db-data: {}
